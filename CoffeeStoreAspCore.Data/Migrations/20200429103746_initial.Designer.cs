// <auto-generated />
using System;
using CoffeeStoreAspCore.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeStoreAspCore.Data.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    [Migration("20200429103746_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMenu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMenu");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdMenu = 1,
                            Name = "Sinh tố Việt Quốc",
                            Status = 1,
                            UnitPrice = 59000
                        },
                        new
                        {
                            Id = 2,
                            IdMenu = 1,
                            Name = "Sinh tố Cam Xoài",
                            Status = 1,
                            UnitPrice = 59000
                        },
                        new
                        {
                            Id = 3,
                            IdMenu = 4,
                            Name = "Americano",
                            Status = 1,
                            UnitPrice = 39000
                        },
                        new
                        {
                            Id = 4,
                            IdMenu = 4,
                            Name = "Bạc Xỉu",
                            Status = 1,
                            UnitPrice = 29000
                        },
                        new
                        {
                            Id = 5,
                            IdMenu = 4,
                            Name = "Cafe đen",
                            Status = 1,
                            UnitPrice = 29000
                        },
                        new
                        {
                            Id = 6,
                            IdMenu = 4,
                            Name = "Cafe Sữa",
                            Status = 1,
                            UnitPrice = 29000
                        },
                        new
                        {
                            Id = 7,
                            IdMenu = 4,
                            Name = "Cappuchino",
                            Status = 1,
                            UnitPrice = 55000
                        },
                        new
                        {
                            Id = 8,
                            IdMenu = 4,
                            Name = "Carameo Macchiato",
                            Status = 1,
                            UnitPrice = 55000
                        },
                        new
                        {
                            Id = 9,
                            IdMenu = 4,
                            Name = "Espresso",
                            Status = 1,
                            UnitPrice = 35000
                        },
                        new
                        {
                            Id = 10,
                            IdMenu = 4,
                            Name = "Latte",
                            Status = 1,
                            UnitPrice = 45000
                        },
                        new
                        {
                            Id = 11,
                            IdMenu = 4,
                            Name = "Mocha",
                            Status = 1,
                            UnitPrice = 49000
                        },
                        new
                        {
                            Id = 12,
                            IdMenu = 4,
                            Name = "Chocolate Đá",
                            Status = 1,
                            UnitPrice = 55000
                        },
                        new
                        {
                            Id = 13,
                            IdMenu = 3,
                            Name = "Trà Đào Cam Sả",
                            Status = 1,
                            UnitPrice = 45000
                        },
                        new
                        {
                            Id = 14,
                            IdMenu = 3,
                            Name = "Trà Đen Macchiato",
                            Status = 1,
                            UnitPrice = 42000
                        },
                        new
                        {
                            Id = 15,
                            IdMenu = 3,
                            Name = "Trà Gạo Rang Macchiato",
                            Status = 1,
                            UnitPrice = 48000
                        },
                        new
                        {
                            Id = 16,
                            IdMenu = 3,
                            Name = "Trà Matcha Latte",
                            Status = 1,
                            UnitPrice = 59000
                        },
                        new
                        {
                            Id = 17,
                            IdMenu = 3,
                            Name = "Trà Matcha Macchiato",
                            Status = 1,
                            UnitPrice = 45000
                        },
                        new
                        {
                            Id = 18,
                            IdMenu = 3,
                            Name = "Trà Oolong Sen An Nhiên",
                            Status = 1,
                            UnitPrice = 45000
                        },
                        new
                        {
                            Id = 19,
                            IdMenu = 3,
                            Name = "Trà Oolong vải Như Ý",
                            Status = 1,
                            UnitPrice = 45000
                        },
                        new
                        {
                            Id = 20,
                            IdMenu = 2,
                            Name = "Caramel Đá Xay",
                            Status = 1,
                            UnitPrice = 59000
                        },
                        new
                        {
                            Id = 21,
                            IdMenu = 2,
                            Name = "Chocolate Đá xay",
                            Status = 1,
                            UnitPrice = 59000
                        },
                        new
                        {
                            Id = 22,
                            IdMenu = 2,
                            Name = "Matcha Đá xay",
                            Status = 1,
                            UnitPrice = 59000
                        });
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.DrinkImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("IdDrink")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdDrink")
                        .IsUnique();

                    b.ToTable("DrinkImages");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thức uống trái cây",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Thức uống đá xay",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Trà & Macchiato",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cà Phê",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CalculatedTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Days")
                        .HasColumnType("date");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IdVoucher")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVoucher");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDrink")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDrink");

                    b.HasIndex("IdOrder");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "5ed15568-2ddb-4ec7-aed0-b4da9daee862",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("ffb27ec8-1d44-4dc3-9f0a-4bbeece0765d"),
                            ConcurrencyStamp = "6fe99ed5-c44e-4c52-b224-cd668e075f68",
                            Description = "Customer role",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = new Guid("0ed83a75-3fc9-4705-9e7e-c8416897b855"),
                            ConcurrencyStamp = "577d4201-e34d-44e4-b7f8-752c6b6424a1",
                            Description = "Staff role",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        });
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            Address = "Quảng Nam",
                            ConcurrencyStamp = "10c0f890-eeee-4c6d-bc94-ed8c20f8abd3",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Phạm Huỳnh Mỹ Hạnh",
                            PasswordHash = "AQAAAAEAACcQAAAAEMaETu1RcgjL7t6SGEIug2i2c675kymm66DB/NmM1lUCtN8bCZtFSJugXeuWsZUrfQ==",
                            PhoneNumber = "0326837276",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b2f823b5-5565-4ca6-bd95-25ec2b058f8a"),
                            AccessFailedCount = 0,
                            Address = "Đồng Nai",
                            ConcurrencyStamp = "be875125-9920-4e05-a93e-fce4a740ddfa",
                            Email = "staff@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hoàng Tùng Dương",
                            PasswordHash = "AQAAAAEAACcQAAAAEM6WSpXTDkgomPKueKm6dV7WavCDoAkkgGKAoqF0cQOqneaRQP7rQ7E0HiUVdAxqhQ==",
                            PhoneNumber = "01263606007",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("caee66a1-a754-43a6-ab8f-b18204179dd1"),
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0278eb53-844b-4bb6-a967-13eddeec31e4",
                            Email = "MinhTu@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Phạm Minh Tú",
                            PasswordHash = "AQAAAAEAACcQAAAAEPJzfgiYCQ5A9bFavmHTDBPZOHIkq+rE3t4CExoHLCBPW4ejsWzyOrXoRQ0nSUzdlQ==",
                            PhoneNumber = "01694564469",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "MinhTu"
                        });
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableTimes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CodeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TimesOfUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("caee66a1-a754-43a6-ab8f-b18204179dd1"),
                            RoleId = new Guid("ffb27ec8-1d44-4dc3-9f0a-4bbeece0765d")
                        },
                        new
                        {
                            UserId = new Guid("b2f823b5-5565-4ca6-bd95-25ec2b058f8a"),
                            RoleId = new Guid("0ed83a75-3fc9-4705-9e7e-c8416897b855")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Drink", b =>
                {
                    b.HasOne("CoffeeStoreAspCore.Data.Entities.Menu", "Menu")
                        .WithMany("Drinks")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.DrinkImage", b =>
                {
                    b.HasOne("CoffeeStoreAspCore.Data.Entities.Drink", "Drink")
                        .WithOne("DrinkImage")
                        .HasForeignKey("CoffeeStoreAspCore.Data.Entities.DrinkImage", "IdDrink")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.Order", b =>
                {
                    b.HasOne("CoffeeStoreAspCore.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreAspCore.Data.Entities.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("IdVoucher");
                });

            modelBuilder.Entity("CoffeeStoreAspCore.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("CoffeeStoreAspCore.Data.Entities.Drink", "Drink")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdDrink")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreAspCore.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
